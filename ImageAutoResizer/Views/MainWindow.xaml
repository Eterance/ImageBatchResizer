<Window x:Class="ImageBatchResizer.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:ImageBatchResizer.Views"
        xmlns:converters="clr-namespace:ImageBatchResizer.Converters"
        xmlns:controls="clr-namespace:ImageBatchResizer.Controls"
        mc:Ignorable="d"
        Title="MainWindow" Height="720" Width="800" MinWidth="600" MinHeight="600">
    <!-- xmlns:i https://stackoverflow.com/questions/20743961/the-name-interaction-does-not-exist-in-the-namespace-http-schemas-microsoft -->

    <Window.Resources>
        <converters:IsCheck2VisibilityConverter x:Key="IsCheck2VisibilityConverter"/>
        <converters:ProgressBarValueRound x:Key="ProgressBarValueRound"/>

        <ItemsPanelTemplate x:Key="ListBoxItemsPanel2">
            <StackPanel Orientation="Vertical">
            </StackPanel>
        </ItemsPanelTemplate>
        <Style x:Key="ListBox_History_style" TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="1" SnapsToDevicePixels="true">
                            <!--把 ScrollViewer 自动滚动到底部的附加属性-->
                            <controls:SmoothScrollViewer x:Name="scv" Style="{StaticResource UWPstyle_scrollviewer}" Focusable="false" Padding="{TemplateBinding Padding}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </controls:SmoothScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
                            </Trigger>
                            <Trigger Property="Selector.IsSelected" Value="True">
                                <Setter Property="Background" TargetName="Bd" Value="Black"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 剪贴板历史记录子项模板 -->
        <DataTemplate x:Key="History_Item_Template">
            <Grid Height="auto" 
                  Width="auto" 
                  HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="40"/>
                </Grid.ColumnDefinitions>
                <Label Content="{Binding .}"/>
                <Button Grid.Column="1">×
                </Button>
            </Grid>
        </DataTemplate>

        <!-- 剪贴板listbox容器模板 -->
        <Style TargetType="{x:Type ListBoxItem}" x:Key="ContainerStyle_History">
            <Setter Property="Margin" Value="16 4 16 4"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="ContentTemplate" Value="{StaticResource History_Item_Template}" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <!--https://www.cnblogs.com/jjseen/p/5491698.html-->
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{StaticResource ResourceKey=Item.Normal.Background}" BorderThickness="2" Background="{StaticResource Item.Normal.Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource color_buttonMouseOver}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                                <!-- 鼠标滑过的阴影效果 -->
                                <!-- <Setter Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect Color="{DynamicResource shadowColor_black}" ShadowDepth="0" BlurRadius="{DynamicResource shadowBlurRadius}" Opacity="10"/>
                                    </Setter.Value>
                                </Setter> -->
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="40"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="20"/>
        </Grid.RowDefinitions>

        <ListBox x:Name="ListBox_Files" 
                Visibility="Hidden" 
                ItemsPanel="{DynamicResource ListBoxItemsPanel2}"
                Style="{DynamicResource ResourceKey=ListBox_History_style}" 
                VirtualizingPanel.ScrollUnit="Pixel" 
                ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                ScrollViewer.VerticalScrollBarVisibility="Visible" 
                BorderThickness="0"
                Margin="-1,0,0,0" SelectionMode="Single" 
                ItemContainerStyle="{StaticResource ContainerStyle_History}" 
                Grid.Row="0" 
                ItemsSource="{Binding SubViewModel.PinnedList}"
                SelectionChanged="ListBox_Files_SelectionChanged" >
        </ListBox>

        <DataGrid Grid.Row="0"
                  IsEnabled="{Binding IsEnableParametersPanel}"
                  AllowDrop="True"
                  ItemsSource="{Binding InputFileList}"
                  SelectedItem="{Binding Path=SelectedPath, Mode=TwoWay}"
                  AutoGenerateColumns="False"
                  CanUserResizeRows="False"
                  HeadersVisibility="All"
                  RowHeaderWidth="24"
                  SelectionUnit="CellOrRowHeader">
            <DataGrid.Columns>
                <DataGridTextColumn Header="文件名" IsReadOnly="True" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="路径" IsReadOnly="True" Binding="{Binding Path}" />
                <DataGridTextColumn Header="转换后路径" IsReadOnly="True" Binding="{Binding ResizedPath}" />
            </DataGrid.Columns>
            <!-- https://stackoverflow.com/questions/40104765/bind-event-in-mvvm-and-pass-event-arguments-as-command-parameter -->
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Drop">
                    <i:CallMethodAction TargetObject="{Binding}"
                                        MethodName="DataGrid_Drop"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </DataGrid>

        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="1*"/>
                <RowDefinition Height="40"/>
            </Grid.RowDefinitions>
            <DockPanel Grid.Row="1" 
                       HorizontalAlignment="Stretch"
                       LastChildFill="False"
                       Margin="8 0 8 0">
                <Button Padding="8 0 8 0"
                        Margin="4" 
                        DockPanel.Dock="Right"
                        Command="{Binding StartCommand}">
                    开始转换
                </Button>
                <Button Padding="8 0 8 0"
                        Margin="4" 
                        DockPanel.Dock="Right"
                        Command="{Binding AppendFilesCommand}"
                        IsEnabled="{Binding IsEnableParametersPanel}">
                    追加文件
                </Button>
                <Button Padding="8 0 8 0"
                        Margin="4" 
                        DockPanel.Dock="Left"
                        Command="{Binding OpenConsoleCommand}">
                    控制台
                </Button>
                <Button Padding="8 0 8 0"
                        Margin="4" 
                        DockPanel.Dock="Left"
                        Command="{Binding DeleteChosenCommand}"
                        IsEnabled="{Binding IsEnableParametersPanel}">
                    删除选中
                </Button>
                <Button Padding="8 0 8 0"
                        Margin="4" 
                        DockPanel.Dock="Left"
                        Command="{Binding DeleteAllCommand}"
                        IsEnabled="{Binding IsEnableParametersPanel}">
                    删除全部
                </Button>
            </DockPanel>
        </Grid>

        <Grid Grid.Row="2" Margin="0 8 0 8" IsEnabled="{Binding IsEnableParametersPanel}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0" Orientation="Vertical" Margin="4 0 4 0">
                <Label Style="{StaticResource WrapLabelStyle}" Content="输入筛选参数"/>
                <CheckBox x:Name="InputResolutionUpperLimitCheckBox" 
                          VerticalAlignment="Stretch" 
                          VerticalContentAlignment="Center"
                          Margin="4 4 4 8"
                          IsChecked="{Binding IsEnableInputResUpperLimit}">
                    <TextBlock TextWrapping="WrapWithOverflow">分辨率上限</TextBlock>
                </CheckBox>
                <Grid IsEnabled="{Binding ElementName=InputResolutionUpperLimitCheckBox, Path=IsChecked}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"
                           HorizontalAlignment="Left">宽</Label>
                    <TextBox Grid.Column="1"
                             VerticalContentAlignment="Center"
                             HorizontalContentAlignment="Center"
                             Text="{Binding InputResUpperLimitWidth}"/>
                    <Label Grid.Column="2"
                           HorizontalAlignment="Left">长</Label>
                    <TextBox Grid.Column="3"
                             VerticalContentAlignment="Center"
                             HorizontalContentAlignment="Center"
                             Text="{Binding InputResUpperLimitHeight}"/>
                </Grid>

                <CheckBox x:Name="InputResolutionLowerLimitCheckBox" 
                          VerticalAlignment="Stretch" 
                          VerticalContentAlignment="Center"
                          Margin="4 4 4 8"
                          IsChecked="{Binding IsEnableInputResLowerLimit}">
                    <TextBlock TextWrapping="WrapWithOverflow">分辨率下限</TextBlock>
                </CheckBox>
                <Grid IsEnabled="{Binding ElementName=InputResolutionLowerLimitCheckBox, Path=IsChecked}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"
                           HorizontalAlignment="Left">宽</Label>
                    <TextBox Grid.Column="1"
                             VerticalContentAlignment="Center"
                             HorizontalContentAlignment="Center"
                             Text="{Binding InputResLowerLimitWidth}"/>
                    <Label Grid.Column="2"
                           HorizontalAlignment="Left">长</Label>
                    <TextBox Grid.Column="3"
                             VerticalContentAlignment="Center"
                             HorizontalContentAlignment="Center"
                             Text="{Binding InputResLowerLimitHeight}"/>
                </Grid>

                <CheckBox VerticalAlignment="Stretch" 
                          VerticalContentAlignment="Center"
                          Margin="4 8 4 8"
                          IsChecked="{Binding IsInputResLimitationAdaptPortraitImage}">
                    <TextBlock TextWrapping="WrapWithOverflow">分辨率限制自适应竖图</TextBlock>
                </CheckBox>

                <Label Style="{StaticResource WrapLabelStyle}" Content="读取格式"/>
                <WrapPanel Margin="4">
                    <CheckBox Margin="4" IsChecked="{Binding IsAcceptBmp}">.bmp</CheckBox>
                    <CheckBox Margin="4" IsChecked="{Binding IsAcceptJpeg}">.jpg</CheckBox>
                    <CheckBox Margin="4" IsChecked="{Binding IsAcceptPng}">.png</CheckBox>
                    <CheckBox Margin="4" IsChecked="{Binding IsAcceptTga}">.tga</CheckBox>
                    <CheckBox Margin="4" IsChecked="{Binding IsAcceptTiff}">.tif</CheckBox>
                    <CheckBox Margin="4" IsChecked="{Binding IsAcceptWebP}">.webp</CheckBox>
                </WrapPanel>
            </StackPanel>

            <StackPanel Grid.Column="1" Orientation="Vertical" Margin="8 0 8 0">
                <Label Style="{StaticResource WrapLabelStyle}" Content="模式"/>
                <WrapPanel Orientation="Horizontal">
                    <RadioButton x:Name="FileSizeModeRadioButton"
                                 IsChecked="{Binding IsFileSizeFirstMode}"
                                 Margin="4"
                                 VerticalContentAlignment="Center">
                        <Label>文件大小优先</Label>
                    </RadioButton>
                    <RadioButton x:Name="ResModeRadioButton"
                                 Margin="4"
                                 VerticalContentAlignment="Center">
                        <Label>分辨率优先</Label> 
                    </RadioButton>
                </WrapPanel>

                <StackPanel Orientation="Vertical"
                            Visibility="{Binding ElementName=FileSizeModeRadioButton, Path=IsChecked, Converter={StaticResource IsCheck2VisibilityConverter}}">
                    <Label Style="{StaticResource WrapLabelStyle}" Content="目标大小区间（KiB）"/>
                    <Grid Margin="0 4 0 4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <TextBox Grid.Column="0"
                                 VerticalContentAlignment="Center"
                                 HorizontalContentAlignment="Center"
                                 Text="{Binding TargetSizeLowerLimit}"/>
                        <Label Grid.Column="1" 
                               HorizontalAlignment="Left">-</Label>
                        <TextBox Grid.Column="2"
                                 VerticalContentAlignment="Center"
                                 HorizontalContentAlignment="Center"
                                 Text="{Binding TargetSizeUpperLimit}"/>
                    </Grid>

                    <DockPanel Margin="0 8 0 8">
                        <Label Style="{StaticResource WrapLabelStyle}" Content="二分法尝试次数上限"/>
                        <TextBox DockPanel.Dock="Left"
                                 Margin="4 0 0 0"
                                 VerticalContentAlignment="Center"
                                 HorizontalContentAlignment="Center"
                                 Text="{Binding BinarySearchTimesLimit}"/>
                    </DockPanel>

                    <CheckBox Margin="0 4 0 4"
                              IsChecked="{Binding IsDeleteSmallerThanTarget}">
                        <TextBlock TextWrapping="WrapWithOverflow">删除直接转换后小于目标大小区间的文件</TextBlock>
                    </CheckBox>

                    <CheckBox x:Name="FileSizeModeOutputResolutionLowerLimitCheckBox" 
                              Margin="0 4 0 4"
                              IsChecked="{Binding IsEnableResLowerLimit}">分辨率下限</CheckBox>
                    <StackPanel IsEnabled="{Binding ElementName=FileSizeModeOutputResolutionLowerLimitCheckBox, Path=IsChecked}">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>
                            <Label Grid.Column="0"
                                    HorizontalAlignment="Left">宽</Label>
                            <TextBox Grid.Column="1"
                                 VerticalContentAlignment="Center"
                                 HorizontalContentAlignment="Center"
                                 Text="{Binding TargetResolutionWidthLowerLimit}"/>
                            <Label Grid.Column="2"
                           HorizontalAlignment="Left">高</Label>
                            <TextBox Grid.Column="3"
                             VerticalContentAlignment="Center"
                             HorizontalContentAlignment="Center"
                             Text="{Binding TargetResolutionHeightLowerLimit}"/>
                        </Grid>

                        <CheckBox VerticalAlignment="Stretch" 
                          VerticalContentAlignment="Center"
                          Margin="0 8 0 4"
                          IsChecked="{Binding IsOutputResLimitationAdaptPortraitImage}">
                            <Label Grid.Column="1" 
                               HorizontalAlignment="Left">
                                <TextBlock TextWrapping="WrapWithOverflow">分辨率限制自适应竖图</TextBlock>
                            </Label>
                        </CheckBox>

                        <Label Style="{StaticResource WrapLabelStyle}" Content="输出图片分辨率小于下限时："/>
                        <RadioButton VerticalContentAlignment="Center"
                                     IsChecked="{Binding FileSizeFirst_DoNothing}">
                            <Label Style="{StaticResource WrapLabelStyle}" Content="保留此图片，什么也不做"/>
                        </RadioButton>
                        <RadioButton VerticalContentAlignment="Center"
                                     IsChecked="{Binding FileSizeFirst_Delete}">
                            <Label Style="{StaticResource WrapLabelStyle}" Content="删除此图片"/>
                        </RadioButton>
                        <RadioButton VerticalContentAlignment="Center"
                                     IsChecked="{Binding FileSizeFirst_IgnoreSizeLimit}">
                            <Label Style="{StaticResource WrapLabelStyle}" Content="忽略目标大小区间限制，重新调整至分辨率下限"/>
                        </RadioButton>

                    </StackPanel>
                </StackPanel>

                <StackPanel Orientation="Vertical" Visibility="{Binding ElementName=ResModeRadioButton, Path=IsChecked, Converter={StaticResource IsCheck2VisibilityConverter}}">
                    <TextBlock TextWrapping="WrapWithOverflow" 
                               Margin="0 4 0 4">目标分辨率</TextBlock>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0"
                           HorizontalAlignment="Left">宽</Label>
                        <TextBox Grid.Column="1"
                             VerticalContentAlignment="Center"
                             HorizontalContentAlignment="Center"
                             Text="{Binding TargetResolutionWidthLowerLimit}"/>
                        <Label Grid.Column="2"
                           HorizontalAlignment="Left">高</Label>
                        <TextBox Grid.Column="3"
                             VerticalContentAlignment="Center"
                             HorizontalContentAlignment="Center"
                             Text="{Binding TargetResolutionHeightLowerLimit}"/>
                    </Grid>

                    <CheckBox VerticalAlignment="Stretch" 
                          VerticalContentAlignment="Center"
                          Margin="0 8 0 4"
                          IsChecked="{Binding IsOutputResLimitationAdaptPortraitImage}">
                        <Label Style="{StaticResource WrapLabelStyle}" Content="分辨率限制自适应竖图"/>
                    </CheckBox>

                    <CheckBox x:Name="ResModeOutputResolutionLowerLimitCheckBox"
                              VerticalContentAlignment="Center"
                              Margin="0 4 0 4"
                              IsChecked="{Binding IsEnableTargetSizeLimit}">
                        <Label Style="{StaticResource WrapLabelStyle}" Content="目标大小区间（KiB）"/>
                    </CheckBox>
                    <StackPanel IsEnabled="{Binding ElementName=ResModeOutputResolutionLowerLimitCheckBox, Path=IsChecked}">
                        <Grid Margin="0 4 0 4">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>
                            <TextBox Grid.Column="0"
                                 VerticalContentAlignment="Center"
                                 HorizontalContentAlignment="Center"
                                 Text="{Binding TargetSizeLowerLimit}"/>
                            <Label Grid.Column="1" 
                               HorizontalAlignment="Left">-</Label>
                            <TextBox Grid.Column="2"
                                 VerticalContentAlignment="Center"
                                 HorizontalContentAlignment="Center"
                                 Text="{Binding TargetSizeUpperLimit}"/>
                        </Grid>

                        <Label Style="{StaticResource WrapLabelStyle}" Content="输出图片文件大小超出目标大小区间时"/>
                        <RadioButton VerticalContentAlignment="Center"
                                     IsChecked="{Binding ResFirst_DoNothing}">
                            <Label Style="{StaticResource WrapLabelStyle}" Content="保留此图片，什么也不做"/>
                        </RadioButton>
                        <RadioButton VerticalContentAlignment="Center"
                                     IsChecked="{Binding ResFirst_Delete}">
                            <Label Style="{StaticResource WrapLabelStyle}" Content="删除此图片"/>
                        </RadioButton>
                        <RadioButton x:Name="ResModeIgnoreRadioButton" 
                                     VerticalContentAlignment="Center"
                                     IsChecked="{Binding ResFirst_IgnoreSizeLimit}">
                            <Label Style="{StaticResource WrapLabelStyle}" Content="忽略目标分辨率限制，重新调整至目标大小区间内"/>
                        </RadioButton>

                        <DockPanel Margin="0 8 0 8" 
                                   IsEnabled="{Binding ElementName=ResModeIgnoreRadioButton, Path=IsChecked}">
                            <Label Style="{StaticResource WrapLabelStyle}" Content="二分法尝试次数上限"/>
                            <TextBox DockPanel.Dock="Left"
                                 Margin="4 0 0 0"
                                 VerticalContentAlignment="Center"
                                 HorizontalContentAlignment="Center">20</TextBox>
                        </DockPanel>

                    </StackPanel>
                </StackPanel>
            </StackPanel>

            <StackPanel Grid.Column="2" Orientation="Vertical" Margin="8 0 8 0">
                <Label Style="{StaticResource WrapLabelStyle}" Content="输出格式"/>
                <ComboBox Margin="0 4 0 4"
                          ItemsSource="{Binding FormatList}"
                          SelectedValue="{Binding SelectedFormatModel}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>

                <Label Style="{StaticResource WrapLabelStyle}" 
                       Content="Webp 压缩模式"
                       Visibility="{Binding IsWebpEncoder, Converter={StaticResource IsCheck2VisibilityConverter}}"/>
                <WrapPanel Orientation="Horizontal"
                           Visibility="{Binding IsWebpEncoder, Converter={StaticResource IsCheck2VisibilityConverter}}">
                    <RadioButton IsChecked="{Binding IsWebpLossyMode}"
                                 Margin="4"
                                 VerticalContentAlignment="Center">
                        <Label>有损</Label>
                    </RadioButton>
                    <RadioButton Margin="4"
                                 VerticalContentAlignment="Center">
                        <Label>无损</Label>
                    </RadioButton>
                </WrapPanel>

                <Label Style="{StaticResource WrapLabelStyle}" 
                       Content="{Binding CompressDescrption}" 
                       Visibility="{Binding IsEnableCompressAdjust, Converter={StaticResource IsCheck2VisibilityConverter}}"/>
                <DockPanel Margin="0 4 0 4"
                           Visibility="{Binding IsEnableCompressAdjust, Converter={StaticResource IsCheck2VisibilityConverter}}">
                    <TextBox Width="40" 
                                 HorizontalContentAlignment="Center"
                                 DockPanel.Dock="Left"
                                 Text="{Binding ElementName=QualitySlider, Path=Value}"/>
                    <Slider x:Name="QualitySlider" 
                                Maximum="{Binding SliderMaximum}" 
                                Minimum="{Binding SliderMinimum}" 
                                Margin="8 0 8 0" 
                                Value="{Binding Quality}" 
                                SmallChange="1" 
                                LargeChange="5"
                                DockPanel.Dock="Right"
                                IsSnapToTickEnabled="True"
                                TickFrequency="1"/>
                </DockPanel>

                <Label Style="{StaticResource WrapLabelStyle}" Content="采样算法"/>
                <ComboBox Margin="0 4 0 4"
                          ItemsSource="{Binding ResamplerList}"
                          SelectedValue="{Binding SelectedResamplerModel}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>

                <Label Style="{StaticResource WrapLabelStyle}" Content="适应分辨率时的缩小策略"/>
                <ComboBox Margin="0 4 0 4"
                          ItemsSource="{Binding ResizeModeList}"
                          SelectedValue="{Binding SelectedResizeModeModel}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>

                <Label Style="{StaticResource WrapLabelStyle}" Content="输出文件夹"/>
                <DockPanel Height="25">
                    <Button DockPanel.Dock="Right" 
                            Margin="4 0 0 0"
                            Padding="8 0 8 0"
                            Command="{Binding SelectOutputFolderCommand}">选择文件夹</Button>
                    <TextBox VerticalContentAlignment="Center"
                             Text="{Binding OutputPath}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="TextChanged">
                                <i:InvokeCommandAction Command="{Binding ResetOuputPathErrorContentCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>
                </DockPanel>
                <Label Style="{StaticResource ErrorLabelStyle}" Content="{Binding OuputPathErrorContent}"/>

                <Label Style="{StaticResource WrapLabelStyle}" Content="输出文件名"/>
                <TextBox VerticalContentAlignment="Center" 
                         Height="25"
                         Text="{Binding OutputFileNamePattern}">
                </TextBox>
                <WrapPanel>
                    <CheckBox VerticalContentAlignment="Center"
                              IsChecked="{Binding IsEnableOriginFileName}">
                        <Label>原文件名 {name}</Label>
                    </CheckBox>
                    <CheckBox VerticalContentAlignment="Center"
                              IsChecked="{Binding IsEnableIndex}">
                        <Label>序号 {index}</Label>
                    </CheckBox>
                    <CheckBox VerticalContentAlignment="Center"
                              IsChecked="{Binding IsEnableTime}">
                        <Label>时间日期 {time}</Label>
                    </CheckBox>
                    <CheckBox VerticalContentAlignment="Center"
                              IsChecked="{Binding IsEnableQuality}">
                        <Label>图片质量 {quality}</Label>
                    </CheckBox>
                </WrapPanel>

            </StackPanel>
        </Grid>

        <Grid Grid.Row="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>
            <ProgressBar Grid.Column="0" 
                         Grid.ColumnSpan="2" 
                         x:Name="ProcessProgressBar"
                         Value="{Binding ProcessedPercent}"/>
            <TextBlock Text="{Binding ProcessedInstruction}"
                       HorizontalAlignment="Right"
                       VerticalAlignment="Center"
                       Grid.Column="0"
                       Margin="0 0 4 0"/>
            <TextBlock Text="{Binding ElementName=ProcessProgressBar, Path=Value, Converter={StaticResource ProgressBarValueRound}}"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Center"
                       Grid.Column="1"
                       Margin="4 0 0 0"/>
        </Grid>
    </Grid>
</Window>
